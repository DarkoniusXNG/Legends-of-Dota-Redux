-- Generated by TypescriptToLua v0.2.0
-- https://github.com/Perryvw/TypescriptToLua
require("typescript_lualib")
item_consumable = {}
item_consumable.__index = item_consumable
function item_consumable.new(construct, ...)
    local instance = setmetatable({}, item_consumable)
    if construct and item_consumable.constructor then item_consumable.constructor(instance, ...) end
    return instance
end
function item_consumable.constructor(self)
end
function item_consumable.GetIntrinsicModifierName(self)
    return "modifier_no_modifier"
end
function item_consumable.OnSpellStart(self)
    self:ConsumeItem(self:GetCaster())
end
function item_consumable.CastFilterResultTarget(self,target)
    if self.GetCaster~=target then
        return UF_FAIL_CUSTOM
    end
    if IsServer() then
        local name = self:GetIntrinsicModifierName()

        local ab = nil

        if not self:GetCaster():HasAbility("ability_consumable_item_container") then
            ab=self:GetCaster():AddAbility("ability_consumable_item_container")
            ab:SetLevel(1)
            ab:SetHidden(true)
        end
        ab=TS_ITE(ab,function() return ab end,function() return self:GetCaster():FindAbilityByName("ability_consumable_item_container") end)
        if not ab or ab[name] then
            return UF_FAIL_CUSTOM
        end
        return UF_SUCCESS
    end
    return UF_SUCCESS
end
function item_consumable.GetCustomCastErrorTarget(self,target)
    if self:GetCaster()~=target then
        return "#consumable_items_only_self"
    end
    local ab = self:GetCaster():FindAbilityByName("ability_consumable_item_container")

    if not ab then
        return "#consumable_items_no_available_slot"
    end
    local name = self:GetIntrinsicModifierName()

    if ab[name] then
        return "#consumable_items_already_consumed"
    end
end
function item_consumable.ConsumeItem(self,caster)
    local name = self:GetIntrinsicModifierName()

    if not self:GetCaster():HasAbility("ability_consumable_item_container") then
        local ab = self:GetCaster():AddAbility("ability_consumable_item_container")

        ab:SetLevel(1)
        ab:SetHidden(true)
    end
    local ab = self:GetCaster():FindAbilityByName("ability_consumable_item_container")

    if ab and not ab[name] then
        caster:RemoveItem(self)
        caster:RemoveModifierByName(name)
        local modifier = caster:AddNewModifier(caster,ab,name,{})

        ab[name]=true
    end
end
