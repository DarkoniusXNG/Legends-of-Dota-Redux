-- Generated by TypescriptToLua v0.2.0
-- https://github.com/Perryvw/TypescriptToLua
require("typescript_lualib")
LinkLuaModifier("modifier_crater_spell_manager","abilities/crater.lua",LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_crater_projectile","abilities/crater.lua",LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_crater_area_controller","abilities/crater.lua",LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_crater_area_control","abilities/crater.lua",LUA_MODIFIER_MOTION_NONE)
crater = {}
crater.__index = crater
function crater.new(construct, ...)
    local instance = setmetatable({}, crater)
    if construct and crater.constructor then crater.constructor(instance, ...) end
    return instance
end
function crater.constructor(self)
end
function crater.GetAbilityTexture(self)
    local caster = self:GetCaster()

    if caster:GetModifierStackCount(self:GetIntrinsicModifierName(),caster)==0 then
        return "invoker_sun_strike"
    else
        return "techies_focused_detonate"
    end
end
function crater.GetManaCost(self,i)
    local caster = self:GetCaster()

    if caster:GetModifierStackCount(self:GetIntrinsicModifierName(),caster)==0 then
        return 100
    else
        return 0
    end
end
function crater.GetCooldown(self,i)
    local caster = self:GetCaster()

    if caster:GetModifierStackCount(self:GetIntrinsicModifierName(),caster)==0 then
        return 0.5
    else
        return 5
    end
end
function crater.GetIntrinsicModifierName(self)
    return "modifier_crater_spell_manager"
end
function crater.OnSpellStart(self)
    local caster = self:GetCaster()

    local origin = caster:GetAbsOrigin()

    if caster:GetModifierStackCount(self:GetIntrinsicModifierName(),caster)==0 then
        local direction = (caster:GetCursorPosition()-origin):Normalized()

        self.dummy=CreateUnitByName(caster:GetUnitName(),origin,true,caster,caster:GetPlayerOwner(),caster:GetTeamNumber())
        self.mod=self.dummy:AddNewModifier(self.dummy,self,"modifier_crater_projectile",{})
        self.mod.direction=direction
        caster:SetModifierStackCount(self:GetIntrinsicModifierName(),caster,1)
        self:EndCooldown()
        self:StartCooldown(0.25)
    else
        caster:SetModifierStackCount(self:GetIntrinsicModifierName(),caster,0)
        self.mod:Destroy()
    end
end
modifier_crater_projectile = {}
modifier_crater_projectile.__index = modifier_crater_projectile
function modifier_crater_projectile.new(construct, ...)
    local instance = setmetatable({}, modifier_crater_projectile)
    if construct and modifier_crater_projectile.constructor then modifier_crater_projectile.constructor(instance, ...) end
    return instance
end
function modifier_crater_projectile.constructor(self)
end
function modifier_crater_projectile.OnCreated(self)
    if IsClient() then
        return
    end
    local projectile = self:GetParent()

    local ability = self:GetAbility()

    self.speed=(ability:GetSpecialValueFor("projectile_speed")*FrameTime())
    self.radius=ability:GetSpecialValueFor("crater_radius")
    self:StartIntervalThink(FrameTime())
    self.particle=ParticleManager:CreateParticle("particles/crater_marker.vpcf",PATTACH_ABSORIGIN,self:GetCaster())
    ParticleManager:SetParticleControl(self.particle,4,Vector(self.radius,0,0))
end
function modifier_crater_projectile.OnIntervalThink(self)
    local projectile = self:GetParent()

    projectile:SetAbsOrigin(projectile:GetAbsOrigin()+(self.direction*self.speed))
end
function modifier_crater_projectile.OnDestroy(self)
    if IsClient() then
        return
    end
    local projectile = self:GetParent()

    local ability = self:GetAbility()

    local origin = projectile:GetAbsOrigin()

    ability:CreateVisibilityNode(origin,self.radius,ability:GetSpecialValueFor("vision_duration"))
    local dummy = CreateModifierThinker(self:GetCaster(),ability,"modifier_crater_area_controller",{duration = 5},origin+Vector(0,0,50),self:GetCaster():GetTeamNumber(),false)

    self:GetParent():Destroy()
end
function modifier_crater_projectile.GetEffectName(self)
    return "particles/crater_marker.vpcf"
end
function modifier_crater_projectile.GetEffectAttachType(self)
    return PATTACH_ABSORIGIN_FOLLOW
end
modifier_crater_area_controller = {}
modifier_crater_area_controller.__index = modifier_crater_area_controller
function modifier_crater_area_controller.new(construct, ...)
    local instance = setmetatable({}, modifier_crater_area_controller)
    if construct and modifier_crater_area_controller.constructor then modifier_crater_area_controller.constructor(instance, ...) end
    return instance
end
function modifier_crater_area_controller.constructor(self)
end
function modifier_crater_area_controller.OnCreated(self)
    if IsServer() then
        self.particle=ParticleManager:CreateParticle("particles/crater_area.vpcf",PATTACH_ABSORIGIN,self:GetCaster())
        ParticleManager:SetParticleControl(self.particle,0,self:GetParent():GetAbsOrigin())
        ParticleManager:SetParticleControl(self.particle,3,self:GetParent():GetAbsOrigin())
        self:StartIntervalThink(FrameTime())
    end
end
function modifier_crater_area_controller.OnIntervalThink(self)
    local units = FindUnitsInRadius(DOTA_TEAM_GOODGUYS,self:GetParent():GetAbsOrigin(),nil,900,DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_BASIC+DOTA_UNIT_TARGET_HERO,DOTA_UNIT_TARGET_FLAG_NONE,FIND_ANY_ORDER,false)

    TS_forEach(units, function(unit)
        local origin = self:GetParent():GetAbsOrigin()

        unit:AddNewModifier(self:GetCaster(),self:GetAbility(),"modifier_crater_area_control",{duration = 0.1,x = origin.x,y = origin.y,z = origin.z})
    end
)
end
function modifier_crater_area_controller.OnDestroy(self)
    if IsServer() then
        ParticleManager:DestroyParticle(self.particle,false)
        ParticleManager:ReleaseParticleIndex(self.particle)
    end
end
modifier_crater_area_control = {}
modifier_crater_area_control.__index = modifier_crater_area_control
function modifier_crater_area_control.new(construct, ...)
    local instance = setmetatable({}, modifier_crater_area_control)
    if construct and modifier_crater_area_control.constructor then modifier_crater_area_control.constructor(instance, ...) end
    return instance
end
function modifier_crater_area_control.constructor(self)
end
function modifier_crater_area_control.OnCreated(self,kv)
    if IsClient() then
        return
    end
    print(self:GetParent():GetUnitName())
    self.position=Vector(kv.x,kv.y,kv.z)
    self:StartIntervalThink(FrameTime())
end
function modifier_crater_area_control.OnIntervalThink(self)
    local unit = self:GetParent()

    local break_range = 500

    local direction = unit:GetAbsOrigin()-self.position

    direction=direction:Normalized()
    AddFOWViewer(unit:GetTeamNumber(),self.position,break_range,FrameTime()*2,false)
end
function modifier_crater_area_control.DeclareFunctions(self)
    return {MODIFIER_PROPERTY_MOVESPEED_LIMIT,MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT,MODIFIER_PROPERTY_FIXED_NIGHT_VISION,MODIFIER_PROPERTY_FIXED_DAY_VISION}
end
function modifier_crater_area_control.GetFixedDayVision(self)
    return 50
end
function modifier_crater_area_control.GetFixedNightVision(self)
    return 50
end
function modifier_crater_area_control.GetModifierMoveSpeed_Limit(self)
    if self:GetStackCount()==1 then
        return 0.01
    end
end
function modifier_crater_area_control.GetModifierMoveSpeedBonus_Constant(self)
    if self:GetStackCount()==1 then
        return -1000
    end
end
modifier_crater_spell_manager = {}
modifier_crater_spell_manager.__index = modifier_crater_spell_manager
function modifier_crater_spell_manager.new(construct, ...)
    local instance = setmetatable({}, modifier_crater_spell_manager)
    if construct and modifier_crater_spell_manager.constructor then modifier_crater_spell_manager.constructor(instance, ...) end
    return instance
end
function modifier_crater_spell_manager.constructor(self)
end
